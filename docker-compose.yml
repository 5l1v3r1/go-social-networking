version: "3"

services:
  write.api:
    image: go-social/write-api
    container_name: go-social-write-api
    build:
      context: ./activity-write-api
    depends_on:
      - rabbitmqserver
      - mongo.server
      - write.daemon
    environment:
      "WRITE_MQ_MASTER_CONN_STR": "amqp://test:password@rabbitmqserver:5672/" # For the sake of testing
      "WRITE_MQ_SLAVE_CONN_STR": "amqp://test:password@rabbitmqserver:5672/" # Master and slave are identical
      "WRITE_API_QUEUE_NAME": "activity-write-queue"
    ports:
      - "8080:8080"
    links:
      - rabbitmqserver
  write.daemon:
    image: go-social/write-daemon
    container_name: go-social-write-daemon
    build:
      context: ./activity-write-daemon
    depends_on:
      - rabbitmqserver
      - pgserver
    environment:
      "WRITE_MQ_CONN_STR": "amqp://test:password@rabbitmqserver:5672/" # For the sake of testing
      "WRITE_API_QUEUE_NAME": "activity-write-queue"
      "EVENT_STORE_STR": "host=pgserver port=5432 user=dev01 dbname=gosocialdb password=godevrocks sslmode=disable"
    links:
      - rabbitmqserver
      - pgserver
  rabbitmqserver:
    image: go-social/mqserver
    container_name: go-social-topic-mq
    hostname: rabbitmqserver
    build:
      context: ./mqserver
    environment:
      "RABBITMQ_USER": "test"
      "RABBITMQ_PASS": "password"
      "WRITE_API_QUEUE_NAME": "activity-write-queue"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./mqserver/data:/var/lib/rabbitmq
  mongo.server:
    image: go-social/mongo
    container_name: go-social-mongo
    build:
      context: ./mongoserver
    ports:
      - "27018:27017"
    environment:
      "MONGO_INITDB_ROOT_USERNAME": "root"
      "MONGO_INITDB_ROOT_PASSWORD": "example"
      "PROJECTION_MAIN_NAME": "go-social-db"
      "PROJECTION_SLAVE_NAME": "go-social-slave"
    volumes:
      - ./mongoserver/data:/data/db
      - ./mongoserver/bk:/data/bkp
    restart: always
  pgserver:
    image: postgres
    container_name: go-social-es-store
    hostname: pgserver
    restart: always
    environment:
      POSTGRES_PASSWORD: godevrocks
      POSTGRES_USER: dev01
      POSTGRES_DB: gosocialdb
    ports:
      - "5432:5432"
    volumes:
      - ./pgserver/postgres-data:/var/lib/postgresql/data
      - ./pgserver/001_tables:/go-social/sql/001_tables
      - ./pgserver/002_data:/go-social/sql/002_data
      - ./pgserver/boot.sh:/docker-entrypoint-initdb.d/boot.sh
